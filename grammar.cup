
import java_cup.runtime.*;

terminal CLASS;           //2
terminal AND;             //3
terminal ELSE;            //4
terminal IF;              //5
terminal WHILE;           //6
terminal READ;            //7
terminal PRINT;           //8
terminal PRINTLN;         //9
terminal RETURN;          //10
terminal OR;              //11
terminal TIMES;           //12
terminal PLUS;            //13
terminal INC;        //14
terminal MINUS;           //15
terminal DEC;      //16
terminal DIVIDE;          //19
terminal SEMI;            //20
terminal LEFT_PAREN;      //21
terminal RT_PAREN;        //22
terminal LEFT_BRACE;      //23
terminal RT_BRACE;        //24
terminal LEFT_BRKT;       //25
terminal RT_BRKT;         //26
terminal EQ;              //27
terminal GTR;             //28
terminal LESS;            //29
terminal LESS_EQ;         //30
terminal GTR_EQ;          //31
terminal NOT_EQ;          //32
terminal NOT;             //33
terminal QUEST;       //34
terminal COLON;           //35
terminal ASSMNT;          //36
terminal COMMA;           //37
terminal FINAL;           //38
terminal VOID;            //39
terminal TRUE;            //40
terminal FALSE;           //41

terminal String INT;      //42
terminal String FLOAT;    //43
terminal String BOOL;     //44
terminal String CHAR;     //45

terminal String ID;       //46
terminal int INTLIT;      //47
terminal double FLOATLIT; //48
terminal String CHARLIT;  //49
terminal String STRINGLIT;//50

// non Terminals
non terminal Program program;
non terminal Memberdecls memberdecls;
non terminal ArrayList<Fielddecl> fielddecls;
non terminal ArrayList<Methoddecl> methoddecls;
non terminal Fielddecl fielddecl;
non terminal Methoddecl methoddecl;
non terminal Expr optionalexpr;
non terminal Boolean optionalsemi;
non terminal String type;
non terminal ArrayList<Argdecl> argdecllist;
non terminal ArrayList<Argdecl> argdecls;
non terminal Argdecl argdecl;
non terminal StmtList stmts;
non terminal Stmt stmt;
non terminal Stmt ifEnd;
non terminal Args args;
non terminal ArrayList<Name> readlist;
non terminal Args printlist;
non terminal Args printlinelist;
non terminal Name name;
non terminal Expr expr;
non terminal BinaryOps binOps;

//precendence
terminal UPLUS, UMINUS;

precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;

precedence left OR;
precedence left AND;

precedence left NOT_EQ, EQ;
precedence left GTR, GTR_EQ, LESS, LESS_EQ;


// precedence left ELSE;

// precedence left ASSMNT;

precedence left QUEST;
precedence right NOT, UPLUS, UMINUS;


// production rules

program ::= stmts: sts
{: RESULT = new Program(sts); :}
;

type ::= INT
        {: RESULT = "int"; :}
        | FLOAT
        {: RESULT = "float"; :}
        | BOOL
        {: RESULT = "bool"; :}
        | CHAR
        {: RESULT = "char"; :}
;

stmts ::= stmt:s stmts: sts 
        {: RESULT = sts.prepend(s); :}
        |
        {: RESULT = new StmtList(); :}
;

stmt ::= name:nm ASSMNT expr:e SEMI
        {: RESULT = new Stmt(nm,e); :}
;

name ::= ID:id
        {: RESULT = new Name(id); :}
        | ID:id LEFT_BRKT expr:e RT_PAREN
        {: RESULT = new Name(id,e); :}
;

args ::= expr:e COMMA args:ar
        {: RESULT = ar.prepend(e); :}
        | expr:e
        {: 
            Args ar = new Args();
            RESULT = ar.prepend(e); 
        :}
;

printlist ::= expr:e COMMA printlinelist:pr
        {: RESULT = pr.prepend(e); :}
        | expr:e
        {: 
            Args pr = new Args();
            RESULT = pr.prepend(e); 
        :}
;

printlinelist ::= printlist:pr
        {: RESULT = pr; :}
        | expr:e
        {: 
            RESULT = new Args();
        :}
;

expr ::= name: nm //1 
        {: RESULT = new Expr(nm); :} 
        | ID:id LEFT_PAREN RT_PAREN //2 
        {: RESULT = new Expr(id,2); :}
        | ID:id LEFT_PAREN args:a RT_PAREN //3
        {: RESULT = new Expr(id,a); :}
        |INTLIT: i //4
        {: RESULT = new Expr(i); :}
        | CHARLIT : c //5
        {: RESULT = new Expr(c,5);:}
        | STRINGLIT: str //6
        {: RESULT = new Expr(str,6);:}
        | FLOATLIT: d //7
        {: RESULT = new Expr(d);:}
        | TRUE  //8
        {: RESULT = new Expr(true);:}
        | FALSE  //9
        {: RESULT = new Expr(false);:}
        | LEFT_PAREN expr:e RT_PAREN //10
        {: RESULT = new Expr(e); :}
        | NOT expr:e //11
        {: RESULT = new Expr(e,11); :}
        | MINUS expr:e //12
        {: RESULT = new Expr(e,12); :} %prec UMINUS
        | PLUS expr:e //13
        {: RESULT = new Expr(e,13); :} %prec UPLUS
        | LEFT_PAREN type:t RT_PAREN expr:e //14
        {: RESULT = new Expr(t,e); :}
        | expr:e1 binOps:ops expr:e2 //15
        {: RESULT = new Expr(e1,e2,ops);:}
        | LEFT_PAREN expr:e1 QUEST expr:e2 COLON expr:e3 RT_PAREN //16
        {: RESULT = new Expr(e1,e2,e3);:}
        ;

binOps ::= TIMES
        {: RESULT = new BinaryOps("*"); :}
        | DIVIDE
        {: RESULT = new BinaryOps("/"); :}
        | PLUS
        {: RESULT = new BinaryOps("+"); :}
        | MINUS
        {: RESULT = new BinaryOps("-"); :}
        | LESS
        {: RESULT = new BinaryOps("<"); :}
        | GTR
        {: RESULT = new BinaryOps(">"); :}
        | LESS_EQ
        {: RESULT = new BinaryOps("<="); :}
        | GTR_EQ
        {: RESULT = new BinaryOps(">="); :}
        | EQ
        {: RESULT = new BinaryOps("=="); :}
        | NOT_EQ
        {: RESULT = new BinaryOps("!="); :}
        | OR
        {: RESULT = new BinaryOps("||"); :}
        | AND
        {: RESULT = new BinaryOps("&&"); :}
        ;
 
